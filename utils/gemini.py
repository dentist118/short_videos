import requests
import time
import sys
from config import GEMINI_API_KEY_FILE
import logging

def load_api_key():
    try:
        with open(GEMINI_API_KEY_FILE, 'r', encoding='utf-8') as f:
            api_key = f.read().strip()
        
        if not api_key:
            raise ValueError("Gemini API key is empty")
            
        return api_key
        
    except FileNotFoundError:
        logging.error("Gemini API key file not found. Please create 'gemini_secret.txt'")
        time.sleep(5)
        sys.exit(1)
    except Exception as e:
        logging.error(f"Failed to load Gemini API key: {str(e)}")
        time.sleep(5)
        sys.exit(1)

API_KEY = load_api_key()
BASE_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={API_KEY}"

def generate_content(prompt):
    """Generate content using Gemini API"""
    try:
        headers = {'Content-Type': 'application/json'}
        payload = {
            "contents": [{
                "parts": [{
                    "text": f"Create a detailed script for a short video about {prompt}. "
                            "Use simple, clear sentences. Each sentence should be able to "
                            "stand alone as it will be paired with an image. "
                            "Respond in the same language as the topic."
                }]
            }]
        }
        
        response = requests.post(BASE_URL, json=payload, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        if 'candidates' not in data or not data['candidates']:
            raise ValueError("No content generated by Gemini")
            
        return data['candidates'][0]['content']['parts'][0]['text']
        
    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {str(e)}")
        raise
    except Exception as e:
        logging.error(f"Content generation failed: {str(e)}")
        raise
